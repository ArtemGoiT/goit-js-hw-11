{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["export function fetchImages(query) {\n  const BASE_URL = 'https://pixabay.com';\n  const END_POINT = '/api/';\n  const KEY_API = '?key=32952239-1d47564a6cdd6d985205bb869';\n  const PARAMS = `&q=${query}&image_type=photo&orientation=horizontal&safesearch=true`;\n\n  const url = BASE_URL + END_POINT + KEY_API + PARAMS;\n\n  return fetch(url)\n    .then(res => {\n      return res.json();\n    })\n    .catch(err => {\n      throw new Error(err.status);\n    });\n}\n\n// *   export function fetchImages(query) {:\n//  Это объявление функции с именем fetchImages, которая экспортируется из модуля для использования в других частях программы.Она принимает один аргумент query.\n\n// *    const BASE_URL = 'https://pixabay.com';:\n// Это объявление константы BASE_URL, которая содержит базовый URL - адрес для запросов к API Pixabay.\n\n//  *   const END_POINT = '/api/';:\n//  Это объявление константы END_POINT, которая содержит конечную точку(endpoint) API, к которой будет осуществлен запрос.\n\n//  *   const KEY_API = '?key=32952239-1d47564a6cdd6d985205bb869';:\n// Это объявление константы KEY_API, которая содержит ключ API Pixabay, необходимый для аутентификации при запросах.\n\n//  *   const PARAMS = &q=${query}&image_type=photo&orientation=horizontal&safesearch=true;:\n// Это объявление константы PARAMS, которая содержит параметры запроса, включая поисковый запрос(query), тип изображения, ориентацию, и флаг безопасного поиска.\n\n//   *  const url = BASE_URL + END_POINT + KEY_API + PARAMS;:\n//  Это объявление переменной url, которая содержит полный URL - адрес для запроса к API Pixabay, объединяя базовый URL, конечную точку, ключ API и параметры запроса.\n\n//   *  return fetch(url):\n// Это выполнение запроса с использованием метода fetch() для получения данных по указанному URL - адресу.\n\n//   *  .then(res => { return res.json(); }):\n// Это обработка ответа от сервера в формате JSON.Метод res.json() извлекает тело ответа в формате JSON.\n\n//*     .catch(err => { throw new Error(err.status); });:\n// Это обработка ошибок.Если запрос завершается неудачно, код выбрасывает исключение с кодом состояния ошибки.\n\n//! Этот код выполняет запрос к API Pixabay для получения изображений в соответствии с заданным запросом и параметрами,\n// ! а затем обрабатывает результат или ошибку в зависимости от успешности запроса.\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nexport const galleryEl = document.querySelector('.gallery');\n\nexport function imageTemplate(data) {\n  const markup = data.hits\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `<li class= \"gallery-item\">\n        <a class=\"gallery-link\" href=\"${largeImageURL}\">\n        <img class=\"gallery-img\" src=\"${webformatURL}\" alt=\"${tags}\"\n        <div class=\"image-description\">\n        <p>Likes: ${likes}</p>\n        <p>Views: ${views}</p>\n        <p>Comments: ${comments}</p>\n        <p>Downloads: ${downloads}</p>\n           </div>\n           </a>  \n        </li>`;\n      }\n    )\n    .join('');\n  galleryEl.insertAdjacentHTML('beforeend', markup);\n\n  const lightbox = new SimpleLightbox('.gallery a', {\n    captions: true,\n    captionDelay: 250,\n    captionsData: 'alt',\n    captionPosition: 'bottom',\n  });\n  lightbox.refresh();\n}\n\n//* import SimpleLightbox from 'simplelightbox';:\n//  Этот оператор импортирует библиотеку SimpleLightbox для работы с галереей изображений.\n\n// *import 'simplelightbox/dist/simple-lightbox.min.css';:\n// Этот оператор импортирует стили CSS для SimpleLightbox, чтобы стилизовать галерею.\n\n//* export const galleryEl = document.querySelector('.gallery');:\n//   Этот оператор находит элемент на веб - странице с классом.gallery и экспортирует его как переменную galleryEl,\n// чтобы он мог быть использован в других частях программы.\n\n// *export function imageTemplate(data) {:\n//  Этот оператор объявляет функцию imageTemplate, которая принимает данные и создает разметку для галереи изображений на основе этих данных.\n//   Внутри функции imageTemplate:\n//* const markup = data.hits.map(...):\n//   Этот блок кода создает разметку для каждого изображения, используя данные из массива data.hits.\n\n//* galleryEl.insertAdjacentHTML('beforeend', markup);:\n// Этот блок кода добавляет созданную разметку в конец контейнера галереи, который был выбран с помощью galleryEl.\n\n//* const lightbox = new SimpleLightbox('.gallery a', { ...});:\n// Этот блок кода создает экземпляр объекта SimpleLightbox,\n// который инициализирует галерею изображений на элементах < a > внутри элемента с классом.gallery.Также задаются опции галереи,\n//   такие как отображение подписей, задержка подписей и т.д.\n\n//* lightbox.refresh();:\n// Этот метод обновляет галерею, чтобы учесть новые элементы, добавленные в нее через insertAdjacentHTML.\n\n//! Этот код берет данные, создает разметку для галереи изображений, добавляет ее на веб-страницу и инициализирует галерею с использованием SimpleLightbox.\n","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nimport { fetchImages } from './js/pixabay-api';\nimport { galleryEl } from './js/render-functions';\nimport { imageTemplate } from './js/render-functions';\n\nconst formEl = document.querySelector('.img-search-form');\nconst loaderEl = document.querySelector('.loader');\n\nformEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  galleryEl.innerHTML = '';\n  loaderEl.classList.remove('hidden');\n  const query = e.target.elements.query.value.trim();\n  fetchImages(query).then(data => {\n    if (data.totalHits === 0 || query === '') {\n      loaderEl.classList.add('hidden');\n      iziToast.show({\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n        messageColor: 'white',\n        backgroundColor: 'red',\n        position: 'topRight',\n      });\n    } else {\n      loaderEl.classList.add('hidden');\n      imageTemplate(data);\n    }\n  });\n  e.target.reset();\n}\n\n// ! Импорт библиотек и модулей:\n//     iziToast: Библиотека для вывода всплывающих уведомлений.\n//     izitoast/dist/css/iziToast.min.css: Стилевой файл для iziToast.\n//     fetchImages из ./js/pixabay-api: Функция для получения данных изображений из API Pixabay.\n//     galleryEl и imageTemplate из ./js/render-functions: Элемент галереи и функция для отображения изображений в галерее.\n\n// !Объявление переменных:\n//     formEl: Элемент формы поиска изображений.\n//     loaderEl: Элемент индикатора загрузки.\n\n//! Обработчик события формы submit (onFormSubmit):\n//     Этот обработчик вызывается при отправке формы поиска.\n//     e.preventDefault(); предотвращает стандартное поведение формы (перезагрузку страницы).\n//     galleryEl.innerHTML = ''; очищает галерею от предыдущих результатов.\n//     loaderEl.classList.remove('hidden'); показывает индикатор загрузки.\n//     Получает поисковый запрос из формы и убирает лишние пробелы (query).\n//     Вызывает функцию fetchImages(query) для получения данных изображений из API Pixabay.\n//     В зависимости от результата запроса выводит соответствующее сообщение с помощью iziToast или отображает полученные изображения с помощью imageTemplate.\n//     e.target.reset(); сбрасывает содержимое формы после отправки.\n\n// ! Обработка ответа от API:\n//     После отправки запроса к API Pixabay с помощью fetchImages, код ожидает ответа.\n//     Если количество результатов равно нулю или поисковый запрос пустой, скрывается индикатор загрузки, и выводится сообщение об ошибке с помощью iziToast.\n//     В противном случае, скрывается индикатор загрузки, и вызывается функция imageTemplate для отображения полученных изображений в галерее.\n"],"names":["fetchImages","query","BASE_URL","END_POINT","KEY_API","PARAMS","url","res","err","galleryEl","imageTemplate","data","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","formEl","loaderEl","onFormSubmit","e","iziToast"],"mappings":"6vBAAO,SAASA,EAAYC,EAAO,CACjC,MAAMC,EAAW,sBACXC,EAAY,QACZC,EAAU,0CACVC,EAAS,MAAMJ,CAAK,2DAEpBK,EAAMJ,EAAWC,EAAYC,EAAUC,EAE7C,OAAO,MAAMC,CAAG,EACb,KAAKC,GACGA,EAAI,MACZ,EACA,MAAMC,GAAO,CACZ,MAAM,IAAI,MAAMA,EAAI,MAAM,CAChC,CAAK,CACL,CA6BA;ACzCO,MAAMC,EAAY,SAAS,cAAc,UAAU,EAEnD,SAASC,EAAcC,EAAM,CAClC,MAAMC,EAASD,EAAK,KACjB,IACC,CAAC,CACC,aAAAE,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IACe;AAAA,wCACyBL,CAAa;AAAA,wCACbD,CAAY,UAAUE,CAAI;AAAA;AAAA,oBAE9CC,CAAK;AAAA,oBACLC,CAAK;AAAA,uBACFC,CAAQ;AAAA,wBACPC,CAAS;AAAA;AAAA;AAAA,cAK5B,EACA,KAAK,EAAE,EACVV,EAAU,mBAAmB,YAAaG,CAAM,EAE/B,IAAIQ,EAAe,aAAc,CAChD,SAAU,GACV,aAAc,IACd,aAAc,MACd,gBAAiB,QACrB,CAAG,EACQ,QAAO,CAClB,CA6BA;AC9DA,MAAMC,EAAS,SAAS,cAAc,kBAAkB,EAClDC,EAAW,SAAS,cAAc,SAAS,EAEjDD,EAAO,iBAAiB,SAAUE,CAAY,EAE9C,SAASA,EAAaC,EAAG,CACvBA,EAAE,eAAc,EAEhBf,EAAU,UAAY,GACtBa,EAAS,UAAU,OAAO,QAAQ,EAClC,MAAMrB,EAAQuB,EAAE,OAAO,SAAS,MAAM,MAAM,OAC5CxB,EAAYC,CAAK,EAAE,KAAKU,GAAQ,CAC1BA,EAAK,YAAc,GAAKV,IAAU,IACpCqB,EAAS,UAAU,IAAI,QAAQ,EAC/BG,EAAS,KAAK,CACZ,QACE,2EACF,aAAc,QACd,gBAAiB,MACjB,SAAU,UAClB,CAAO,IAEDH,EAAS,UAAU,IAAI,QAAQ,EAC/BZ,EAAcC,CAAI,EAExB,CAAG,EACDa,EAAE,OAAO,OACX,CAYA;"}